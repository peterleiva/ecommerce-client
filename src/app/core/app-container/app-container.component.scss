@use 'utilities' as *;
@use 'sass:list';
@use 'sass:map';

$app-background: color-pick('background-1');
$sidenav-background: color-gradient('background-1');
$replicas-count: 2;

// app replica as a css shadow
$app-replica: (
  x: rem(-30),
  y: 0,
  blur: 0,
  radius: rem(-15),
  color: $app-background
);

// regular app shadow
$app-shadow: (
  x: rem(-4),
  y: rem(2),
  blur: rem(7),
  radius: rem(-2),
  color: color-gray('gray-2')
);

$app-border-radius: rem(14);

// creates replicas and shadow
@function shadow-replicas($count: $replicas-count) {
  $replicas: ();

  @for $i from 0 through $count {
    $replica-shadow: ();

    // multiplfy each replica by current iterator
    $replica: ();
    @each $key, $value in $app-replica {
      @if $key != 'color' {
        $value: $value * $i;
      }

      $replica: map.merge($replica, ($key: $value));
    }

    $replica-shadow: map.get($replica, 'x') + map.get($app-shadow, 'x')
                     map.get($app-shadow, 'y')
                     map.get($app-shadow, 'blur')
                     map.get($replica, 'radius')
                     map.get($app-shadow, 'color');

    $replica: list.join(map.values($replica), (), space);

    $replicas: list.join($replicas, ($replica, $replica-shadow));
  }

  @return $replicas;
}

:host {
  background: var(--light);

  &.opening, &.open {
    border-radius: $app-border-radius;
    box-shadow: shadow-replicas();
  }

  &.open {
    transform: translateX(40vw);
    transform-origin: left;

    .trigger {
      border-radius: $app-border-radius 0 0 $app-border-radius;
    }
  }
}